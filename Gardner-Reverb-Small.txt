/* Small Room Reverberator
 * 
 * Implemented as proposed in "The Virtual Acoustic Room"
 * 		by William Grant Gardner
 * (http://www.media.mit.edu/~billg/docs/ms-thesis.ps.gz)
 *
 *	updated by sault
 *         v 2.0 now with cool library
 */

desc:sault ::: small room reverb

slider1:-120<-120,0,1>Dry (dB)
slider2:-6<-120,0,1>Wet (dB)
slider3:50<1,100,1>Damping (%)
slider5:200<1,500,1>highpass (Hz)
slider10:1<0,20,1>Stereo Separation (ms)


import lib/st-verb-3.jsfx-inc


@init

function singlepole(in,target,coeff) ( in*coeff + target*(1-coeff); );
function get_coeff(ms) (exp(-1/(srate*0.001*ms)); );
function db2ratio(db) ( 10^(db * 0.05); );
function lp_set(fc) instance(a) ( a = 1 - exp(-2*$pi * fc / srate); );
function lp(in) instance(lp, a) ( lp += a * (in - lp); );
function hp_set(fc) instance(a) ( a = 1 - exp(-2*$pi * fc / srate); );
function hp(in) instance(hp, a) ( hp += a * (in - hp); in - hp; );


@slider

wet_gain = db2ratio(slider2);
dry_gain = db2ratio(slider1);
damping = 1 - slider3 * 0.01;

sep = slider10;

buffer0 = 10000;

buffer0 = nested00.nested_allpass2_init(buffer0, 
	35, 22, 8.3, 
	0.3, 0.4, 0.6,
	1.3, 1.5, 1.9);

buffer0 = nested01.nested_allpass1_init(buffer0,
	66, 30,
	0.1, 0.4,
	1.7, 2);

buffer0 = nested10.nested_allpass2_init(buffer0,
	35 + sep, 22 - sep, 8.3 + sep, 
	0.3, 0.4, 0.6,
	1.3, 1.5, 1.9);

buffer0 = nested11.nested_allpass1_init(buffer0,
	66 + sep, 30 - sep,
	0.1, 0.4,
	1.7, 2);

lp0.lp_set(4200);
lp1.lp_set(4200);

hp0.hp_set(slider5);
hp1.hp_set(slider5);



@sample

s0 = hp0.hp( spl0 );
s1 = hp1.hp( spl1 );

s00 = nested00.nested_allpass2( s0 + damping * feedback0 );
s01 = nested01.nested_allpass1( s00 );
feedback0 = lp0.lp(s01);

s10 = nested10.nested_allpass2( s1 + damping * feedback1 );
s11 = nested11.nested_allpass1( s10 );
feedback1 = lp1.lp(s11);

out0 = (s00 + s01) * 0.5;
out1 = (s10 + s11) * 0.5;

spl0 = spl0 * dry_gain + out0 * wet_gain;
spl1 = spl1 * dry_gain + out1 * wet_gain;


